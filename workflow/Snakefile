# SpinePrep Snakefile: validate + discover + mppca + motion + confounds smoke
import json
import os
import subprocess
from pathlib import Path

CFG_PATH = os.environ.get("SPINEPREP_CONFIG", "configs/study.yaml")
CFG_SCHEMA = "schemas/config.schema.json" if Path("schemas/config.schema.json").exists() else None

def _load():
    from spineprep.config import load_config
    return load_config(CFG_PATH, CFG_SCHEMA)

CFG = _load()
BIDS = CFG["paths"]["bids_dir"]
DERIV = CFG["paths"]["deriv_dir"]
LOGS = CFG["paths"]["logs_dir"]
Path(LOGS).mkdir(parents=True, exist_ok=True)

rule all:
    input:
        f"{LOGS}/validate.ok",
        f"{LOGS}/discover.json",
        f"{LOGS}/samples.tsv",
        f"{LOGS}/mppca_smoke.ok",
        f"{LOGS}/motion_smoke.ok",
        f"{LOGS}/confounds_smoke.ok",

rule validate_config:
    output:
        ok = f"{LOGS}/validate.ok"
    run:
        from spineprep.config import load_config
        load_config(CFG_PATH, CFG_SCHEMA)
        Path(output.ok).write_text("ok\n")

rule discover:
    input:
        ok = rules.validate_config.output.ok
    output:
        out = f"{LOGS}/discover.json"
    run:
        from spineprep.config import load_config
        from spineprep.adapters.bids import discover
        cfg = load_config(CFG_PATH, CFG_SCHEMA)
        summary = discover(cfg["paths"]["bids_dir"])
        Path(output.out).write_text(json.dumps(summary, indent=2))
        print("Subjects:", summary["counts"]["subjects"], "Runs:", summary["counts"]["runs"])

rule samples:
    input:
        disc = rules.discover.output.out
    output:
        tsv = f"{LOGS}/samples.tsv"
    run:
        from workflow.lib.samples import build_samples  # type: ignore
        n = build_samples(input.disc, BIDS, output.tsv)
        print(f"Wrote samples.tsv with {n} rows")

rule mppca_smoke:
    input:
        disc = rules.discover.output.out
    output:
        mark = f"{LOGS}/mppca_smoke.ok"
    run:
        import json, os, subprocess
        from spineprep.config import load_config
        from spineprep.adapters.bids import bold_nii
        cfg = load_config(CFG_PATH, CFG_SCHEMA)
        summ = json.loads(Path(input.disc).read_text())
        assert summ["subjects"], "No subjects with runs found in BIDS."
        s0 = summ["subjects"][0]
        sub = s0["id"]; ses = s0["sessions"][0]["id"]; runid = s0["sessions"][0]["runs"][0]
        in_bold = bold_nii(BIDS, sub, ses, runid)
        env = os.environ.copy()
        env["IN_BOLD"] = in_bold
        env["DENOISE_MPPCA"] = "1" if cfg.get("options", {}).get("denoise_mppca", False) else "0"
        Path("steps/spi05_mppca.sh").chmod(0o755)
        subprocess.run(["bash", "steps/spi05_mppca.sh"], check=True, env=env)
        Path(output.mark).write_text("ok\n")

rule motion_smoke:
    input:
        disc = rules.discover.output.out,
        prev = rules.mppca_smoke.output.mark
    output:
        mark = f"{LOGS}/motion_smoke.ok"
    run:
        import json, os, subprocess
        from spineprep.config import load_config
        from spineprep.adapters.bids import bold_nii
        from pathlib import Path as _P

        cfg = load_config(CFG_PATH, CFG_SCHEMA)
        summ = json.loads(Path(input.disc).read_text())
        s0 = summ["subjects"][0]
        sub = s0["id"]; ses = s0["sessions"][0]["id"]; runid = s0["sessions"][0]["runs"][0]
        in_bold = bold_nii(BIDS, sub, ses, runid)
        in_dir = _P(in_bold).parent
        in_base = _P(in_bold).name[:-7] if in_bold.endswith(".nii.gz") else _P(in_bold).stem
        base_no_bold = in_base[:-5] if in_base.endswith("_bold") else in_base
        mppca_bold = str(in_dir / f"{base_no_bold}_desc-mppca_bold.nii.gz")
        if not _P(mppca_bold).exists():
            mppca_bold = in_bold

        env = os.environ.copy()
        env["IN_BOLD"] = mppca_bold
        env["MOTION_ENABLE"] = "1"
        Path("steps/spi06_motion.sh").chmod(0o755)
        subprocess.run(["bash", "steps/spi06_motion.sh"], check=True, env=env)
        Path(output.mark).write_text("ok\n")

rule confounds_smoke:
    input:
        prev = rules.motion_smoke.output.mark
    output:
        mark = f"{LOGS}/confounds_smoke.ok"
    run:
        import json, os, subprocess
        from spineprep.config import load_config
        from spineprep.adapters.bids import bold_nii
        from pathlib import Path as _P

        cfg = load_config(CFG_PATH, CFG_SCHEMA)
        summ = json.loads(Path(f"{LOGS}/discover.json").read_text())
        s0 = summ["subjects"][0]
        sub = s0["id"]; ses = s0["sessions"][0]["id"]; runid = s0["sessions"][0]["runs"][0]
        in_bold = bold_nii(BIDS, sub, ses, runid)
        in_dir = _P(in_bold).parent
        in_base = _P(in_bold).name[:-7] if in_bold.endswith(".nii.gz") else _P(in_bold).stem
        base_no_bold = in_base[:-5] if in_base.endswith("_bold") else in_base
        motion_bold = str(in_dir / f"{base_no_bold}_desc-motioncorr_bold.nii.gz")
        if not _P(motion_bold).exists():
            motion_bold = in_bold

        env = os.environ.copy()
        env["IN_BOLD"] = motion_bold
        env["TR_S"] = str(cfg.get("acq", {}).get("tr", 1.0))
        Path("steps/spi07_confounds.sh").chmod(0o755)
        subprocess.run(["bash", "steps/spi07_confounds.sh"], check=True, env=env)
        Path(output.mark).write_text("ok\n")
