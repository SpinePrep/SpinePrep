"""QC HTML generation for SpinePrep."""
from __future__ import annotations

import json
from datetime import datetime
from pathlib import Path
from typing import Any


# Inline CSS for self-contained HTML
CSS = """
body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    background: #f5f5f5;
    color: #333;
}
h1, h2, h3 { color: #2c3e50; }
.header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    padding: 30px;
    border-radius: 8px;
    margin-bottom: 20px;
}
.card {
    background: white;
    padding: 20px;
    margin: 15px 0;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.status-pass { color: #27ae60; font-weight: bold; }
.status-warn { color: #f39c12; font-weight: bold; }
.status-fail { color: #e74c3c; font-weight: bold; }
table {
    width: 100%;
    border-collapse: collapse;
    margin: 15px 0;
}
th, td {
    padding: 10px;
    text-align: left;
    border-bottom: 1px solid #ddd;
}
th { background: #f8f9fa; font-weight: 600; }
.footer {
    text-align: center;
    color: #7f8c8d;
    margin-top: 40px;
    padding-top: 20px;
    border-top: 1px solid #ddd;
}
"""


def build_qc_index(
    out_dir: Path,
    subjects: list[str],
    pipeline_version: str,
    doctor_status: str,
    doctor_json_path: Path | None = None,
    dag_svg_path: Path | None = None,
) -> Path:
    """
    Build QC index HTML page.

    Args:
        out_dir: Output directory for QC
        subjects: List of subject IDs
        pipeline_version: Pipeline version
        doctor_status: Doctor check status (pass/warn/fail)
        doctor_json_path: Optional path to doctor JSON
        dag_svg_path: Optional path to DAG SVG

    Returns:
        Path to generated index.html
    """
    qc_dir = out_dir / "qc"
    qc_dir.mkdir(parents=True, exist_ok=True)

    # Load doctor info if available
    doctor_info = None
    if doctor_json_path and doctor_json_path.exists():
        with open(doctor_json_path) as f:
            doctor_info = json.load(f)

    # Build HTML
    html_parts = [
        "<!DOCTYPE html>",
        "<html lang='en'>",
        "<head>",
        "  <meta charset='UTF-8'>",
        "  <meta name='viewport' content='width=device-width, initial-scale=1.0'>",
        "  <title>SpinePrep QC Report</title>",
        f"  <style>{CSS}</style>",
        "</head>",
        "<body>",
        "  <div class='header'>",
        "    <h1>SpinePrep Quality Control Report</h1>",
        f"    <p>Pipeline Version: {pipeline_version}</p>",
        f"    <p>Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>",
        "  </div>",
    ]

    # Doctor status card
    status_class = f"status-{doctor_status}"
    html_parts.extend([
        "  <div class='card'>",
        "    <h2>Environment Check</h2>",
        f"    <p class='{status_class}'>Status: {doctor_status.upper()}</p>",
    ])

    if doctor_info:
        html_parts.append("    <table>")
        html_parts.append("      <tr><th>Check</th><th>Status</th></tr>")
        
        # Platform info
        plat = doctor_info.get("platform", {})
        html_parts.append(f"      <tr><td>OS</td><td>{plat.get('os', 'unknown')}</td></tr>")
        html_parts.append(f"      <tr><td>Python</td><td>{plat.get('python', 'unknown')}</td></tr>")
        
        # Dependencies
        deps = doctor_info.get("deps", {})
        sct = deps.get("sct", {})
        html_parts.append(f"      <tr><td>SCT</td><td>{'✓ ' + sct.get('version', '') if sct.get('found') else '✗ Not found'}</td></tr>")
        
        html_parts.append("    </table>")

    html_parts.append("  </div>")

    # Subjects list card
    html_parts.extend([
        "  <div class='card'>",
        "    <h2>Subjects</h2>",
        f"    <p>Total subjects: {len(subjects)}</p>",
        "    <ul>",
    ])

    for sub in subjects:
        sub_page = f"{sub}_qc.html"
        html_parts.append(f"      <li><a href='{sub_page}'>{sub}</a></li>")

    html_parts.append("    </ul>")
    html_parts.append("  </div>")

    # DAG visualization card
    if dag_svg_path and dag_svg_path.exists():
        # Make path relative to QC directory
        rel_dag = Path("../provenance/dag.svg")
        html_parts.extend([
            "  <div class='card'>",
            "    <h2>Workflow DAG</h2>",
            f"    <p><a href='{rel_dag}'>View workflow graph (SVG)</a></p>",
            "  </div>",
        ])

    # Footer
    html_parts.extend([
        "  <div class='footer'>",
        f"    <p>Generated by SpinePrep {pipeline_version}</p>",
        "    <p><a href='https://github.com/SpinePrep/SpinePrep'>GitHub Repository</a></p>",
        "  </div>",
        "</body>",
        "</html>",
    ])

    # Write HTML
    html_path = qc_dir / "index.html"
    html_path.write_text("\n".join(html_parts))

    return html_path


def build_subject_qc(
    out_dir: Path,
    subject: str,
    runs: list[dict[str, Any]],
    motion_summary: dict[str, Any],
) -> Path:
    """
    Build subject-specific QC page.

    Args:
        out_dir: Output directory
        subject: Subject ID
        runs: List of run info dicts
        motion_summary: Motion statistics

    Returns:
        Path to generated subject QC HTML
    """
    qc_dir = out_dir / "qc"
    qc_dir.mkdir(parents=True, exist_ok=True)

    html_parts = [
        "<!DOCTYPE html>",
        "<html lang='en'>",
        "<head>",
        "  <meta charset='UTF-8'>",
        "  <meta name='viewport' content='width=device-width, initial-scale=1.0'>",
        f"  <title>{subject} QC</title>",
        f"  <style>{CSS}</style>",
        "</head>",
        "<body>",
        "  <div class='header'>",
        f"    <h1>{subject} Quality Control</h1>",
        "    <p><a href='index.html'>← Back to index</a></p>",
        "  </div>",
        "  <div class='card'>",
        "    <h2>Motion Summary</h2>",
        "    <table>",
        "      <tr><th>Metric</th><th>Value</th></tr>",
        f"      <tr><td>Max FD</td><td>{motion_summary.get('max_fd', 'N/A')} mm</td></tr>",
        f"      <tr><td>Mean FD</td><td>{motion_summary.get('mean_fd', 'N/A')} mm</td></tr>",
        "    </table>",
        "  </div>",
        "  <div class='card'>",
        "    <h2>Runs</h2>",
        "    <table>",
        "      <tr><th>Task</th><th>Run</th><th>Volumes</th></tr>",
    ]

    for run in runs:
        html_parts.append(
            f"      <tr><td>{run.get('task', 'unknown')}</td><td>{run.get('run', 'unknown')}</td><td>{run.get('nvols', 0)}</td></tr>"
        )

    html_parts.extend([
        "    </table>",
        "  </div>",
        "</body>",
        "</html>",
    ])

    html_path = qc_dir / f"{subject}_qc.html"
    html_path.write_text("\n".join(html_parts))

    return html_path

